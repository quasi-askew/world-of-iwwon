// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__whitelistResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  IWWON_PROVENANCE(): string {
    let result = super.call(
      "IWWON_PROVENANCE",
      "IWWON_PROVENANCE():(string)",
      []
    );

    return result[0].toString();
  }

  try_IWWON_PROVENANCE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "IWWON_PROVENANCE",
      "IWWON_PROVENANCE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MAX_TOKEN(): BigInt {
    let result = super.call("MAX_TOKEN", "MAX_TOKEN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TOKEN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_TOKEN", "MAX_TOKEN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REVEAL_TIMESTAMP(): BigInt {
    let result = super.call(
      "REVEAL_TIMESTAMP",
      "REVEAL_TIMESTAMP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REVEAL_TIMESTAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REVEAL_TIMESTAMP",
      "REVEAL_TIMESTAMP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addAddressToWhitelist(addr: Address): boolean {
    let result = super.call(
      "addAddressToWhitelist",
      "addAddressToWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_addAddressToWhitelist(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addAddressToWhitelist",
      "addAddressToWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addAddressesToWhitelist(addrs: Array<Address>): boolean {
    let result = super.call(
      "addAddressesToWhitelist",
      "addAddressesToWhitelist(address[]):(bool)",
      [ethereum.Value.fromAddressArray(addrs)]
    );

    return result[0].toBoolean();
  }

  try_addAddressesToWhitelist(
    addrs: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addAddressesToWhitelist",
      "addAddressesToWhitelist(address[]):(bool)",
      [ethereum.Value.fromAddressArray(addrs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  countWhitelisted(): BigInt {
    let result = super.call(
      "countWhitelisted",
      "countWhitelisted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_countWhitelisted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countWhitelisted",
      "countWhitelisted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flipSaleState(): boolean {
    let result = super.call("flipSaleState", "flipSaleState():(bool)", []);

    return result[0].toBoolean();
  }

  try_flipSaleState(): ethereum.CallResult<boolean> {
    let result = super.tryCall("flipSaleState", "flipSaleState():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWhiteListedAdrrs(): Array<Address> {
    let result = super.call(
      "getWhiteListedAdrrs",
      "getWhiteListedAdrrs():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getWhiteListedAdrrs(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWhiteListedAdrrs",
      "getWhiteListedAdrrs():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWhitelistedData(_address: Address): BigInt {
    let result = super.call(
      "getWhitelistedData",
      "getWhitelistedData(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_getWhitelistedData(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWhitelistedData",
      "getWhitelistedData(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(addr: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTokenPurchase(): BigInt {
    let result = super.call(
      "maxTokenPurchase",
      "maxTokenPurchase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTokenPurchase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTokenPurchase",
      "maxTokenPurchase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTokenPurchasePresale(): BigInt {
    let result = super.call(
      "maxTokenPurchasePresale",
      "maxTokenPurchasePresale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTokenPurchasePresale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTokenPurchasePresale",
      "maxTokenPurchasePresale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  privateSaleIsActive(): boolean {
    let result = super.call(
      "privateSaleIsActive",
      "privateSaleIsActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_privateSaleIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "privateSaleIsActive",
      "privateSaleIsActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  saleIsActive(): boolean {
    let result = super.call("saleIsActive", "saleIsActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_saleIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("saleIsActive", "saleIsActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startingIndex(): BigInt {
    let result = super.call("startingIndex", "startingIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startingIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingIndex",
      "startingIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingIndexBlock(): BigInt {
    let result = super.call(
      "startingIndexBlock",
      "startingIndexBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_startingIndexBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingIndexBlock",
      "startingIndexBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelist(param0: Address): Contract__whitelistResult {
    let result = super.call(
      "whitelist",
      "whitelist(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__whitelistResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_whitelist(
    param0: Address
  ): ethereum.CallResult<Contract__whitelistResult> {
    let result = super.tryCall(
      "whitelist",
      "whitelist(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__whitelistResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  whitelistAddr(param0: BigInt): Address {
    let result = super.call(
      "whitelistAddr",
      "whitelistAddr(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_whitelistAddr(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistAddr",
      "whitelistAddr(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAddressToWhitelistCall extends ethereum.Call {
  get inputs(): AddAddressToWhitelistCall__Inputs {
    return new AddAddressToWhitelistCall__Inputs(this);
  }

  get outputs(): AddAddressToWhitelistCall__Outputs {
    return new AddAddressToWhitelistCall__Outputs(this);
  }
}

export class AddAddressToWhitelistCall__Inputs {
  _call: AddAddressToWhitelistCall;

  constructor(call: AddAddressToWhitelistCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAddressToWhitelistCall__Outputs {
  _call: AddAddressToWhitelistCall;

  constructor(call: AddAddressToWhitelistCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddAddressesToWhitelistCall extends ethereum.Call {
  get inputs(): AddAddressesToWhitelistCall__Inputs {
    return new AddAddressesToWhitelistCall__Inputs(this);
  }

  get outputs(): AddAddressesToWhitelistCall__Outputs {
    return new AddAddressesToWhitelistCall__Outputs(this);
  }
}

export class AddAddressesToWhitelistCall__Inputs {
  _call: AddAddressesToWhitelistCall;

  constructor(call: AddAddressesToWhitelistCall) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddAddressesToWhitelistCall__Outputs {
  _call: AddAddressesToWhitelistCall;

  constructor(call: AddAddressesToWhitelistCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class EmergencySetStartingIndexBlockCall extends ethereum.Call {
  get inputs(): EmergencySetStartingIndexBlockCall__Inputs {
    return new EmergencySetStartingIndexBlockCall__Inputs(this);
  }

  get outputs(): EmergencySetStartingIndexBlockCall__Outputs {
    return new EmergencySetStartingIndexBlockCall__Outputs(this);
  }
}

export class EmergencySetStartingIndexBlockCall__Inputs {
  _call: EmergencySetStartingIndexBlockCall;

  constructor(call: EmergencySetStartingIndexBlockCall) {
    this._call = call;
  }
}

export class EmergencySetStartingIndexBlockCall__Outputs {
  _call: EmergencySetStartingIndexBlockCall;

  constructor(call: EmergencySetStartingIndexBlockCall) {
    this._call = call;
  }
}

export class FlipPrivateSaleStateCall extends ethereum.Call {
  get inputs(): FlipPrivateSaleStateCall__Inputs {
    return new FlipPrivateSaleStateCall__Inputs(this);
  }

  get outputs(): FlipPrivateSaleStateCall__Outputs {
    return new FlipPrivateSaleStateCall__Outputs(this);
  }
}

export class FlipPrivateSaleStateCall__Inputs {
  _call: FlipPrivateSaleStateCall;

  constructor(call: FlipPrivateSaleStateCall) {
    this._call = call;
  }
}

export class FlipPrivateSaleStateCall__Outputs {
  _call: FlipPrivateSaleStateCall;

  constructor(call: FlipPrivateSaleStateCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall extends ethereum.Call {
  get inputs(): FlipSaleStateCall__Inputs {
    return new FlipSaleStateCall__Inputs(this);
  }

  get outputs(): FlipSaleStateCall__Outputs {
    return new FlipSaleStateCall__Outputs(this);
  }
}

export class FlipSaleStateCall__Inputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall__Outputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintTokenCall extends ethereum.Call {
  get inputs(): MintTokenCall__Inputs {
    return new MintTokenCall__Inputs(this);
  }

  get outputs(): MintTokenCall__Outputs {
    return new MintTokenCall__Outputs(this);
  }
}

export class MintTokenCall__Inputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintTokenCall__Outputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReserveTokenCall extends ethereum.Call {
  get inputs(): ReserveTokenCall__Inputs {
    return new ReserveTokenCall__Inputs(this);
  }

  get outputs(): ReserveTokenCall__Outputs {
    return new ReserveTokenCall__Outputs(this);
  }
}

export class ReserveTokenCall__Inputs {
  _call: ReserveTokenCall;

  constructor(call: ReserveTokenCall) {
    this._call = call;
  }
}

export class ReserveTokenCall__Outputs {
  _call: ReserveTokenCall;

  constructor(call: ReserveTokenCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetProvenanceHashCall extends ethereum.Call {
  get inputs(): SetProvenanceHashCall__Inputs {
    return new SetProvenanceHashCall__Inputs(this);
  }

  get outputs(): SetProvenanceHashCall__Outputs {
    return new SetProvenanceHashCall__Outputs(this);
  }
}

export class SetProvenanceHashCall__Inputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }

  get provenanceHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetProvenanceHashCall__Outputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }
}

export class SetRevealTimestampCall extends ethereum.Call {
  get inputs(): SetRevealTimestampCall__Inputs {
    return new SetRevealTimestampCall__Inputs(this);
  }

  get outputs(): SetRevealTimestampCall__Outputs {
    return new SetRevealTimestampCall__Outputs(this);
  }
}

export class SetRevealTimestampCall__Inputs {
  _call: SetRevealTimestampCall;

  constructor(call: SetRevealTimestampCall) {
    this._call = call;
  }

  get revealTimeStampInSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRevealTimestampCall__Outputs {
  _call: SetRevealTimestampCall;

  constructor(call: SetRevealTimestampCall) {
    this._call = call;
  }
}

export class SetStartingIndexCall extends ethereum.Call {
  get inputs(): SetStartingIndexCall__Inputs {
    return new SetStartingIndexCall__Inputs(this);
  }

  get outputs(): SetStartingIndexCall__Outputs {
    return new SetStartingIndexCall__Outputs(this);
  }
}

export class SetStartingIndexCall__Inputs {
  _call: SetStartingIndexCall;

  constructor(call: SetStartingIndexCall) {
    this._call = call;
  }
}

export class SetStartingIndexCall__Outputs {
  _call: SetStartingIndexCall;

  constructor(call: SetStartingIndexCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
